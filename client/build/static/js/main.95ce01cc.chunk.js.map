{"version":3,"sources":["components/SearchBar.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","useState","searchText","setsearchText","Container","Col","type","placeholder","value","onChange","e","target","style","minWidth","borderRadius","paddingTop","paddingBottom","paddingLeft","Button","variant","onClick","onSubmit","marginLeft","marginBottom","i","walk","Home","setSearch","errorMessage","playerX","playerY","player","setPlayer","document","onkeydown","window","event","code","console","log","p","useEffect","React","setCount","grid","GRID_SIZE","mazeGenerator","id","setInterval","next","clearInterval","fluid","className","Row","color","marginTop","error","map","x","xIndex","key","message","documentElement","setProperty","bind","table","getRandomInt","min","max","Math","floor","random","range","Array","from","length","_","getNeighbours","currentIndex","columns","rows","neighbour","push","width","height","index","stack","visited","Set","size","neighbours","filter","has","array","direction","nextIndex","add","pop","kiff","time","fill","timeEnd","App","backgroundColor","minHeight","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.95ce01cc.chunk.js","sourcesContent":["import \".././App.css\";\r\nimport React, { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Container, Col } from \"react-bootstrap\";\r\n\r\nexport function SearchBar(props) {\r\n  const [searchText, setsearchText] = useState(\"\");\r\n  const placeholderText = \" enter a seed value\";\r\n\r\n  // generate error if seed value is not a number\r\n  // or if the seed value is < 1\r\n\r\n  return (\r\n    <Container>\r\n      <Col>\r\n        <input\r\n          type=\"text\"\r\n          placeholder={placeholderText}\r\n          value={searchText}\r\n          onChange={(e) => setsearchText(e.target.value)}\r\n          style={{\r\n            minWidth: \"300px\",\r\n            borderRadius: \"10px\",\r\n            paddingTop: \"5px\",\r\n            paddingBottom: \"5px\",\r\n            paddingLeft: \"5px\",\r\n          }}\r\n        />\r\n        <Button\r\n          variant=\"warning\"\r\n          onClick={() => props.onSubmit(searchText)}\r\n          style={{ marginLeft: \"15px\", marginBottom: \"5px\" }}\r\n        >\r\n          Generate Maze\r\n        </Button>\r\n      </Col>\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport { SearchBar } from \"../components/SearchBar\";\r\n\r\nimport \"./../css/style.css\";\r\n\r\nexport function Home() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [games, setGames] = useState(null);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [playerX, setPlayerX] = useState(0);\r\n  const [playerY, setPlayerY] = useState(0);\r\n  const [player, setPlayer] = useState(0);\r\n\r\n  // register key events\r\n  document.onkeydown = (e) => {\r\n    //console.log(grid);\r\n    //console.log(range);\r\n    e = e || window.event;\r\n    if (e.code === \"KeyW\") {\r\n      console.log(\"up arrow pressed\");\r\n      setPlayer((p) => p - 50);\r\n    } else if (e.code === \"KeyD\") {\r\n      console.log(\"right arrow pressed\");\r\n      setPlayer((p) => p + 1);\r\n    } else if (e.code === \"KeyS\") {\r\n      console.log(\"down arrow pressed\");\r\n      setPlayer((p) => p + 50);\r\n    } else if (e.code === \"KeyA\") {\r\n      console.log(\"left arrow pressed\");\r\n      setPlayer((p) => p - 1);\r\n    }\r\n  };\r\n\r\n  // // player moved\r\n  // useEffect(\r\n  //   () => {\r\n  //     (() => {})();\r\n  //   },\r\n  //   [playerY],\r\n  //   [playerX]\r\n  // );\r\n\r\n  useEffect(() => {console.log(\"player\")}, [playerY], [playerX]);\r\n\r\n  // callback functio for SearchBar\r\n  const searchGame = (searchText) => {\r\n    setSearch(searchText);\r\n  };\r\n\r\n  // // triggers API request for game data\r\n  // useEffect(() => {\r\n  //   (async () => {\r\n  //     if (search === \"\") return;\r\n\r\n  //     try {\r\n  //       let res = await fetch(`/search/${search}`);\r\n  //       let data = await res.json();\r\n\r\n  //       // display error if search returns no results\r\n  //       if (data === 0) {\r\n  //         setErrorMessage(\"game not found\");\r\n  //         return;\r\n  //       }\r\n\r\n  //       setErrorMessage(\"\");\r\n  //       setSelectedGame(data[0]);\r\n  //       setGames(data);\r\n\r\n  //       console.log(\"Successful request for game data : \" + search);\r\n  //     } catch (err) {\r\n  //       setErrorMessage(\"error gathering game data\");\r\n  //       console.log(\"Error fetching data : \" + err);\r\n  //     }\r\n  //   })();\r\n  // }, [search]);\r\n\r\n  //move up and remove React.\r\n  let [_count, setCount] = React.useState(0);\r\n  const [mazeGenerator] = React.useState(() =>\r\n    walk(grid, GRID_SIZE, GRID_SIZE)\r\n  );\r\n  //walk(grid, GRID_SIZE, GRID_SIZE)\r\n\r\n  useEffect(() => {\r\n    let id = setInterval(() => {\r\n      setCount((p) => p + 1);\r\n      mazeGenerator.next();\r\n      console.log(\"generator\");\r\n    }, 1000);\r\n    return () => clearInterval(id);\r\n  }, []);\r\n\r\n  return (\r\n    <Container fluid className=\"bordercon\">\r\n      <Row style={{ color: \"rgb(255, 188, 62)\", marginTop: \"30px\" }}>\r\n        <h1>Welcome to Maze Racer</h1>\r\n      </Row>\r\n      <Row className=\"borderr\">\r\n        <Col className=\"bordercol\">\r\n          <SearchBar onSubmit={searchGame} />\r\n        </Col>\r\n      </Row>\r\n      {error(errorMessage)}\r\n      <Row>\r\n        <Col>\r\n          <div>\r\n            <div className=\"grid cf\">\r\n              {grid.map((x, xIndex) => {\r\n                //console.log(x, xIndex, yIndex);\r\n                //console.log(grid);\r\n                if (xIndex == player) {\r\n                  return <div key={xIndex} className={`player box-${x}`}></div>;\r\n                } else {\r\n                  return <div key={xIndex} className={`box box-${x}`}></div>;\r\n                }\r\n              })}\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\n// error message if no game is found\r\nconst error = (message) => {\r\n  if (message === \"\") return;\r\n\r\n  return (\r\n    <Row style={{ color: \"white\" }}>\r\n      <h4>\r\n        <i>{message}</i>\r\n      </h4>\r\n    </Row>\r\n  );\r\n};\r\n\r\nconst GRID_SIZE = 50;\r\ndocument.documentElement.style.setProperty(\"--grid-size\", `${GRID_SIZE}`);\r\n\r\nconst l = console.log.bind(console);\r\nconst t = console.table.bind(console);\r\n\r\nconst getRandomInt = (min, max) =>\r\n  Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\nfunction getRandomItem(array) {\r\n  return array[getRandomInt(0, array.length - 1)];\r\n}\r\n\r\n/**\r\n * - `min` included\r\n * - `max` excluded\r\n */\r\nconst range = (min, max) =>\r\n  Array.from({ length: max - min }).map((_, i) => i + min);\r\n\r\nvar Direction = [1, 2, 4, 8];\r\n\r\nfunction getNeighbours(currentIndex, columns, rows) {\r\n  const neighbour = [];\r\n\r\n  if (currentIndex < 0 || currentIndex >= columns * rows) {\r\n    return neighbour;\r\n  }\r\n  // l(index);\r\n\r\n  if (currentIndex >= columns) {\r\n    neighbour.push([1, currentIndex - columns]);\r\n    // l(`${index} can go up`);\r\n  }\r\n  if (currentIndex % columns !== columns - 1) {\r\n    neighbour.push([2, currentIndex + 1]);\r\n    // l(`${index} can go right`);\r\n  }\r\n  if (currentIndex >= 0 && currentIndex < columns * rows - columns) {\r\n    neighbour.push([4, currentIndex + columns]);\r\n    // l(`${index} can go down`);\r\n  }\r\n  if (currentIndex % columns > 0) {\r\n    neighbour.push([8, currentIndex - 1]);\r\n    // l(`${index} can go left`);\r\n  }\r\n  return neighbour;\r\n}\r\n\r\nfunction* walk(grid, width, height) {\r\n  let index = getRandomInt(0, grid.length - 1);\r\n  const stack = [index];\r\n  const visited = new Set([index]);\r\n  // l('starting at', index);\r\n\r\n  let i = 0;\r\n  grid[index] = i;\r\n\r\n  yield index;\r\n  while (visited.size < grid.length) {\r\n    const neighbours = getNeighbours(index, width, height).filter(\r\n      (x) => !visited.has(x[1])\r\n    );\r\n\r\n    if (neighbours.length) {\r\n      // getRandomItem\r\n      const [direction, nextIndex] = getRandomItem(neighbours);\r\n      if (direction) {\r\n        switch (direction) {\r\n          case 1:\r\n            grid[index] ^= 1;\r\n            grid[nextIndex] ^= 4;\r\n            break;\r\n          case 2:\r\n            grid[index] ^= 2;\r\n            grid[nextIndex] ^= 8;\r\n            break;\r\n          case 4:\r\n            grid[index] ^= 4;\r\n            grid[nextIndex] ^= 1;\r\n            break;\r\n          case 8:\r\n            grid[index] ^= 8;\r\n            grid[nextIndex] ^= 2;\r\n            break;\r\n        }\r\n\r\n        index = nextIndex;\r\n        // l('moving to', index);\r\n        stack.push(nextIndex);\r\n        visited.add(nextIndex);\r\n        i++;\r\n        // grid[index] = i;\r\n        // return index;\r\n        continue;\r\n      }\r\n    }\r\n\r\n    index = stack.pop();\r\n    // l('steping back to', index);\r\n  }\r\n}\r\n\r\nconst kiff = (size = GRID_SIZE) => {\r\n  console.time(\"walk\");\r\n  const grid = range(0, size * size).fill(0);\r\n  Array.from(walk(grid, size, size));\r\n  console.timeEnd(\"walk\");\r\n  return grid;\r\n};\r\n\r\nwindow.kiff = kiff;\r\n\r\nconst grid = range(0, GRID_SIZE * GRID_SIZE).fill(0);\r\n\r\nvar example1 = async () => {};\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport { Home } from \"./pages/Home\";\r\n\r\n//comment test\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\" style={{ backgroundColor: \"rgb(31, 34, 51)\", minHeight: \"100vh\" }}>\r\n      <header className=\"App-header\">\r\n        <h3 className=\"headingText\">MazeRacer</h3>\r\n      </header>\r\n      <Home />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}